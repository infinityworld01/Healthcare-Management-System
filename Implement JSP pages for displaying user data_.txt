To implement JSP pages that display user data for an Ambulance Booking System using Java,
we'll structure the system with appropriate JSP pages and servlets to manage the flow of data.
The following example shows how to display user details, booking information, and provide 
the necessary interaction with the user.

Overview of the System:
JSP Pages: Display user data and booking information.
Servlets: Handle user requests, manage session data, and forward responses to the JSP pages.
Booking Model: A Java class representing a user's booking details.

Directory Structure

AmbulanceBookingSystem
│
├── src/
│   └── com/
│       └── servlet/
│           └── AmbulanceBookingServlet.java
│           └── UserProfileServlet.java
│
├── WebContent/
│   ├── WEB-INF/
│   │   ├── web.xml
│   ├── index.jsp
│   ├── ambulanceBookingForm.jsp
│   ├── bookingConfirmation.jsp
│   ├── viewBooking.jsp
│   ├── userProfile.jsp
└── lib/

1. Booking Model (Booking.java)
This Java class represents the data for a user's ambulance booking.
package com.servlet;

public class Booking {
    private String name;
    private String phone;
    private String address;
    private String ambulanceType;
    private String time;

    public Booking(String name, String phone, String address, String ambulanceType, String time) {
        this.name = name;
        this.phone = phone;
        this.address = address;
        this.ambulanceType = ambulanceType;
        this.time = time;
    }

    public String getName() {
        return name;
    }

    public String getPhone() {
        return phone;
    }

    public String getAddress() {
        return address;
    }

    public String getAmbulanceType() {
        return ambulanceType;
    }

    public String getTime() {
        return time;
    }
}

2. AmbulanceBookingServlet.java (Handle Booking Logic)
The servlet will handle the ambulance booking logic, 
including processing the form data and forwarding the 
user to the confirmation page.
package com.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class AmbulanceBookingServlet extends HttpServlet {

    // Handle GET request (show booking form)
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Forward to the booking form
        RequestDispatcher dispatcher = request.getRequestDispatcher("ambulanceBookingForm.jsp");
        dispatcher.forward(request, response);
    }

    // Handle POST request (process booking form)
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Retrieve form data
        String name = request.getParameter("name");
        String phone = request.getParameter("phone");
        String address = request.getParameter("address");
        String ambulanceType = request.getParameter("ambulanceType");
        String time = request.getParameter("time");

        // Create a Booking object
        Booking booking = new Booking(name, phone, address, ambulanceType, time);

        // Set the booking data as a request attribute to pass to the JSP
        request.setAttribute("booking", booking);

        // Forward to the booking confirmation page
        RequestDispatcher dispatcher = request.getRequestDispatcher("bookingConfirmation.jsp");
        dispatcher.forward(request, response);
    }
}

3. UserProfileServlet.java (Display User Profile)
This servlet handles the logic for displaying the user's profile and their booking information.
package com.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;

public class UserProfileServlet extends HttpServlet {

    // Handle GET request (display user profile and booking)
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Assuming user information is stored in the session after login (this is a simulation for the example)
        HttpSession session = request.getSession();

        // User information and booking stored in session (for simplicity, hardcoded)
        User user = (User) session.getAttribute("user");

        if (user == null) {
            // Redirect to login if no user data found in session
            response.sendRedirect("login.jsp");
        } else {
            // Forward to the profile page
            request.setAttribute("user", user);
            RequestDispatcher dispatcher = request.getRequestDispatcher("userProfile.jsp");
            dispatcher.forward(request, response);
        }
    }
}

4. JSP Pages
index.jsp (Home Page)
The home page with a link to the booking form.
<!DOCTYPE html>
<html>
<head>
    <title>Ambulance Booking System</title>
</head>
<body>
    <h2>Welcome to the Ambulance Booking System</h2>
    <a href="ambulanceBookingForm.jsp">Book an Ambulance</a>
</body>
</html>

ambulanceBookingForm.jsp (Booking Form)
The form where the user inputs their booking details.

<!DOCTYPE html>
<html>
<head>
    <title>Ambulance Booking Form</title>
</head>
<body>
    <h2>Book an Ambulance</h2>
    <form action="user" method="POST">
        <label for="name">Your Name:</label><br>
        <input type="text" id="name" name="name" required><br><br>

        <label for="phone">Phone Number:</label><br>
        <input type="tel" id="phone" name="phone" required><br><br>

        <label for="address">Address:</label><br>
        <input type="text" id="address" name="address" required><br><br>

        <label for="ambulanceType">Ambulance Type:</label><br>
        <select name="ambulanceType" id="ambulanceType">
            <option value="Basic">Basic</option>
            <option value="Advanced">Advanced</option>
        </select><br><br>

        <label for="time">Preferred Time:</label><br>
        <input type="datetime-local" id="time" name="time" required><br><br>

        <button type="submit">Book Ambulance</button>
    </form>
</body>
</html>

bookingConfirmation.jsp (Display Booking Confirmation)
This page displays the confirmation of the ambulance booking after the user submits the form.

<!DOCTYPE html>
<html>
<head>
    <title>Booking Confirmation</title>
</head>
<body>
    <h2>Booking Confirmation</h2>
    <p>Thank you for booking with us!</p>

    <h3>Booking Details:</h3>
    <p><strong>Name:</strong> ${booking.name}</p>
    <p><strong>Phone:</strong> ${booking.phone}</p>
    <p><strong>Address:</strong> ${booking.address}</p>
    <p><strong>Ambulance Type:</strong> ${booking.ambulanceType}</p>
    <p><strong>Preferred Time:</strong> ${booking.time}</p>

    <br>
    <a href="viewBooking">View Booking Details</a>
</body>
</html>
viewBooking.jsp (View Booking Details)
This page allows the user to view their booking details.
<!DOCTYPE html>
<html>
<head>
    <title>View Booking</title>
</head>
<body>
    <h2>Your Booking Details</h2>
    <p><strong>Name:</strong> ${booking.name}</p>
    <p><strong>Phone:</strong> ${booking.phone}</p>
    <p><strong>Address:</strong> ${booking.address}</p>
    <p><strong>Ambulance Type:</strong> ${booking.ambulanceType}</p>
    <p><strong>Preferred Time:</strong> ${booking.time}</p>

    <br>
    <a href="index.jsp">Back to Home</a>
</body>
</html>

userProfile.jsp (User Profile Page)
This page displays user profile data such as name, phone, and past bookings.
<!DOCTYPE html>
<html>
<head>
    <title>User Profile</title>
</head>
<body>
    <h2>User Profile</h2>
    
    <p><strong>Name:</strong> ${user.name}</p>
    <p><strong>Email:</strong> ${user.email}</p>
    <p><strong>Phone:</strong> ${user.phone}</p>
    <p><strong>Address:</strong> ${user.address}</p>

    <h3>Your Ambulance Bookings:</h3>
    <c:if test="${not empty user.bookings}">
        <ul>
            <c:forEach var="booking" items="${user.bookings}">
                <li><strong>Booking ID:</strong> ${booking.id} - <strong>Ambulance Type:</strong> ${booking.ambulanceType} - <strong>Time:</strong> ${booking.time}</li>
            </c:forEach>
        </ul>
    </c:if>

    <c:if test="${empty user.bookings}">
        <p>No bookings yet. Please <a href="ambulanceBookingForm.jsp">book an ambulance</a>.</p>
    </c:if>

    <br>
    <a href="index.jsp">Back to Home</a>
</body>
</html>
5. Web Configuration (web.xml)
In the WEB-INF/web.xml, configure servlet mappings to link the requests to the correct servlets.

<web-app xmlns="http://java.sun.com/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
                             http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd" 
         version="3.1">

    <!-- AmbulanceBookingServlet Mapping -->
    <servlet>
        <servlet-name>AmbulanceBookingServlet</servlet-name>
        <servlet-class>com.servlet.AmbulanceBookingServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AmbulanceBookingServlet</servlet-name>
        <url-pattern>/user</url-pattern>
    </servlet-mapping>

    <!-- UserProfileServlet Mapping -->
    <servlet>
        <servlet-name>UserProfileServlet</servlet-name>
        <servlet-class>com.servlet.UserProfileServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>UserProfileServlet</servlet-name>
        <url-pattern>/userProfile</url-pattern>
    </servlet-mapping>

</web-app>

Conclusion
This example shows how to display user data and ambulance booking details 
using JSP pages in an Ambulance Booking System. Each JSP page retrieves the 
data from the session or request and displays it dynamically. The user can 
fill out the booking form, view the booking confirmation, and see their 
profile with past bookings.

















